# This file contains the default configuration to compile for iPhoneOS
# platforms. It contains sensitive enviroment configuration that
# shouldn't be modified unless you know what you are doing.
# PLEASE, DO NOT EDIT THIS FILE

import os
import re
from cerbero.utils import shell
from cerbero.config import Architecture, DistroVersion
from cerbero.errors import FatalError

variants += ['nopython', 'notestspackage']

# We don't want anything from macports detected in configure and
# used later. System libs are passed through the -isysroot option
allow_system_libs=False

ios_min_version = ios_min_version or '9.0'

if target_distro_version == distro_version:
    target_distro_version = None

if target_arch in [Architecture.X86, Architecture.X86_64]:
    ios_platform = 'iPhoneSimulator'
else:
    ios_platform = 'iPhoneOS'

iphone_platform = '/Applications/Xcode.app/Contents/Developer/Platforms/%s.platform/Developer' % ios_platform
toolchain_path = '%s/usr/bin' % iphone_platform

def sdk_location_to_version_array(location):
    match = re.fullmatch(ios_platform + r'(\d{1,2}\.\d).sdk', location)
    if not match:
        raise FatalError('Could not find SDK version from location: ', location)
    return [int(m.group(1)) for m in re.finditer(r'(\d+)', match.group(1))]

def version_array_to_distro(version):
    return 'ios_' + '_'.join((str(v) for v in version))

def version_array_to_sdk_location(version):
    return os.path.join(iphone_platform, 'SDKs', ios_platform + '.'.join((str(v) for v in version)) + '.sdk')

def find_ios_sdk_locations():
    sdks = [sdk for sdk in os.listdir(os.path.join(iphone_platform, 'SDKs'))]
    sdks = [sdk for sdk in sdks if sdk.startswith(ios_platform) and sdk.endswith('.sdk') and sdk != ios_platform + '.sdk']
    return sdks

# Find the installed SDK
best_version = [0, 0]
_sdk_version = None
for sdk in find_ios_sdk_locations():
    version_arr = sdk_location_to_version_array(sdk)
    version = version_array_to_distro(version_arr)
    if target_distro_version is not None and target_distro_version is version:
        best_version = version_arr
        break
    else:
        if version_arr > best_version:
            best_version = version_arr
            _sdk_version = version

if target_distro_version is not None and target_distro_version != _sdk_version:
    raise FatalError("The SDK for %s is not installed" % target_distro_version)
elif _sdk_version is None:
    raise FatalError("The SDK for iOS could not be found in your system")
else:
    target_distro_version = _sdk_version

sysroot = version_array_to_sdk_location(best_version)

ccache = use_ccache and 'ccache ' or ''
extra_cflags='-Wall -g -Os'
extra_ldflags='-Wno-error=unused-command-line-argument'
if target_arch == Architecture.ARM64:
    arch_cflags = ' -arch arm64 -pipe'
    host = 'aarch64-apple-darwin10'
elif target_arch == Architecture.ARMv7S:
    arch_cflags = ' -arch armv7s -mcpu=cortex-a9 -pipe'
    host = 'arm-apple-darwin10'
elif target_arch == Architecture.ARMv7:
    arch_cflags = ' -arch armv7 -mcpu=cortex-a8 -pipe'
    host = 'arm-apple-darwin10'
elif target_arch == Architecture.ARM:
    arch_cflags = ' -arch armv6 -mcpu=arm1176jzf-s -pipe'
    host = 'arm-apple-darwin10'
elif target_arch == Architecture.X86:
    arch_cflags = ' -arch i386 '
    host = 'i386-apple-darwin10'
elif target_arch == Architecture.X86_64:
    arch_cflags = ' -arch x86_64 '
    host = 'x86_64-apple-darwin10'
elif target_arch == Architecture.UNIVERSAL:
    arch_cflags=''
else:
  raise FatalError("Arch %s not supported" % target_arch)

# Toolchain environment
os.environ['CC']= 'clang'
os.environ['CXX']= 'clang++'
extra_cflags += ' -Wno-error=format-nonliteral -Wno-error=implicit-function-declaration '

os.environ['PATH'] = '%s:%s' % (toolchain_path, os.environ['PATH'])
os.environ['OBJC'] = os.environ['CC']
os.environ['OBJCXX'] = os.environ['CXX']
os.environ['CPP']= "%s -E" % os.environ['CC']
os.environ['CXXPP']= os.environ['CPP']
os.environ['STRIP'] = 'strip'
os.environ['LD']= 'ld'
os.environ['AR']= 'ar'
os.environ['NM']= 'nm'
os.environ['NMEDIT']= 'nmedit'
os.environ['RANLIB']= 'ranlib'
os.environ['CPPFLAGS'] = '{} -isysroot {} '.format(arch_cflags, sysroot)
os.environ['CFLAGS'] = os.environ['CPPFLAGS']
os.environ['LDFLAGS'] = os.environ['CPPFLAGS']
if ios_platform == 'iPhoneOS':
  os.environ['CFLAGS'] += '-miphoneos-version-min={} '.format(ios_min_version)
  os.environ['LDFLAGS'] += '-miphoneos-version-min={0} -Wl,-iphoneos_version_min,{0} '.format(ios_min_version)
  os.environ['CCASFLAGS'] = '-miphoneos-version-min={} '.format(ios_min_version)
else:
  os.environ['CFLAGS'] += '-mios-simulator-version-min={} '.format(ios_min_version)
  os.environ['LDFLAGS'] += '-mios-simulator-version-min={0} -Wl,-ios_simulator_version_min,{0} '.format(ios_min_version)
os.environ['CFLAGS'] += extra_cflags
os.environ['LDFLAGS'] += extra_ldflags
os.environ['OBJCFLAGS'] = os.environ['CFLAGS']
os.environ['OBJLDFLAGS'] = os.environ['LDFLAGS']
os.environ['CXXFLAGS'] =' -stdlib=libc++ ' +  os.environ['CFLAGS']
os.environ['OBJCXXFLAGS'] =' -stdlib=libc++ ' +  os.environ['CFLAGS']

os.environ['AS']= 'as'
if target_arch in [Architecture.X86, Architecture.X86_64]:
    os.environ.pop('GAS', None)
else:
    os.environ['GAS']= '%s %s %s -fembed-bitcode' % ('gas-preprocessor.pl', os.environ['CC'], os.environ['CFLAGS'])



if use_ccache:
    os.environ['CC'] = 'ccache  %s' % os.environ['CC']
    os.environ['CXX'] = 'ccache  %s' % os.environ['CXX']

# For GLib
os.environ['glib_cv_stack_grows'] = 'yes'
os.environ['glib_cv_uscore'] = 'no'
os.environ['ac_cv_func_posix_getpwuid_r'] = 'yes'
os.environ['ac_cv_func_posix_getgrgid_r'] = 'yes'
os.environ['gt_cv_c_wchar_t'] = 'no'
os.environ['ac_cv_func__NSGetEnviron'] = 'no'

# For pixman
os.environ['ac_cv_tls'] = 'none'

# Workaround for https://openradar.appspot.com/22671534 on 10.11.
os.environ['gl_cv_func_getcwd_abort_bug'] = 'no'
